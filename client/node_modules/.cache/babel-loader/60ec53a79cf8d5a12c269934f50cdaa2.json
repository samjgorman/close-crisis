{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React, { createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport mapboxgl from '../utils/mapboxgl';\nimport BaseControl from './base-control';\nimport Marker from './marker';\nimport MapState from '../utils/map-state';\nimport TransitionManager from '../utils/transition-manager';\nimport { isGeolocationSupported } from '../utils/geolocate-utils';\nvar LINEAR_TRANSITION_PROPS = Object.assign({}, TransitionManager.defaultProps, {\n  transitionDuration: 500\n});\n\nvar noop = function noop() {};\n\nvar propTypes = Object.assign({}, BaseControl.propTypes, {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  positionOptions: PropTypes.object,\n  fitBoundsOptions: PropTypes.object,\n  trackUserLocation: PropTypes.bool,\n  showUserLocation: PropTypes.bool,\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func\n});\nvar defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  style: {},\n  positionOptions: null,\n  fitBoundsOptions: null,\n  trackUserLocation: false,\n  showUserLocation: true\n});\n\nvar GeolocateControl = function (_BaseControl) {\n  _inherits(GeolocateControl, _BaseControl);\n\n  function GeolocateControl() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GeolocateControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GeolocateControl)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      supportsGeolocation: false,\n      markerPosition: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_mapboxGeolocateControl\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"_geolocateButtonRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_markerRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_setupMapboxGeolocateControl\", function (supportsGeolocation) {\n      if (!supportsGeolocation) {\n        console.warn('Geolocation support is not available, the GeolocateControl will not be visible.');\n        return;\n      }\n\n      var controlOptions = {};\n      ['positionOptions', 'fitBoundsOptions', 'trackUserLocation', 'showUserLocation'].forEach(function (prop) {\n        if (prop in _this.props && _this.props[prop] !== null) {\n          controlOptions[prop] = _this.props[prop];\n        }\n      });\n      _this._mapboxGeolocateControl = new mapboxgl.GeolocateControl(controlOptions);\n      _this._mapboxGeolocateControl._watchState = 'OFF';\n      _this._mapboxGeolocateControl._geolocateButton = _this._geolocateButtonRef.current;\n      _this._mapboxGeolocateControl._updateMarker = _this._updateMarker;\n      _this._mapboxGeolocateControl._updateCamera = _this._updateCamera;\n      _this._mapboxGeolocateControl._setup = true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onClickGeolocate\", function () {\n      return _this._mapboxGeolocateControl.trigger();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateMarker\", function (position) {\n      if (position) {\n        _this.setState({\n          markerPosition: position.coords\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getBounds\", function (position) {\n      var center = new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude);\n      var radius = position.coords.accuracy;\n      var bounds = center.toBounds(radius);\n      return [[bounds._ne.lng, bounds._ne.lat], [bounds._sw.lng, bounds._sw.lat]];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_updateCamera\", function (position) {\n      var viewport = _this._context.viewport;\n\n      var bounds = _this._getBounds(position);\n\n      var _fitBounds = new WebMercatorViewport(viewport).fitBounds(bounds),\n          longitude = _fitBounds.longitude,\n          latitude = _fitBounds.latitude,\n          zoom = _fitBounds.zoom;\n\n      var newViewState = Object.assign({}, viewport, {\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n      var mapState = new MapState(newViewState);\n      var viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS);\n      var onViewportChange = _this.props.onViewportChange || _this._context.onViewportChange || noop;\n      var onViewStateChange = _this.props.onViewStateChange || _this._context.onViewStateChange || noop;\n      onViewStateChange({\n        viewState: viewState\n      });\n      onViewportChange(viewState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderButton\", function (type, label, callback) {\n      return React.createElement(\"button\", {\n        key: type,\n        className: \"mapboxgl-ctrl-icon mapboxgl-ctrl-\".concat(type),\n        ref: _this._geolocateButtonRef,\n        type: \"button\",\n        title: label,\n        onClick: callback\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderMarker\", function () {\n      var showUserLocation = _this.props.showUserLocation;\n      var markerPosition = _this.state.markerPosition;\n\n      if (!showUserLocation || !markerPosition) {\n        return null;\n      }\n\n      return React.createElement(Marker, {\n        key: \"location-maker\",\n        ref: _this._markerRef,\n        className: \"mapboxgl-user-location-dot\",\n        longitude: markerPosition.longitude,\n        latitude: markerPosition.latitude,\n        onContextMenu: function onContextMenu(e) {\n          return e.preventDefault();\n        },\n        captureDrag: false,\n        captureDoubleClick: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(GeolocateControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      isGeolocationSupported().then(function (result) {\n        _this2.setState({\n          supportsGeolocation: result\n        });\n\n        _this2._setupMapboxGeolocateControl(result);\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var markerRef = this._markerRef.current;\n\n      if (this._mapboxGeolocateControl && markerRef) {\n        this._mapboxGeolocateControl._dotElement = markerRef._containerRef.current;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var geolocationWatchID = this._mapboxGeolocateControl._geolocationWatchID;\n\n      if (geolocationWatchID !== undefined) {\n        window.navigator.geolocation.clearWatch(geolocationWatchID);\n        this._mapboxGeolocateControl._geolocationWatchID = undefined;\n      }\n    }\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      if (!this.state.supportsGeolocation) {\n        return null;\n      }\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          style = _this$props.style;\n      return React.createElement(\"div\", null, this._renderMarker(), React.createElement(\"div\", {\n        key: \"geolocate-control\",\n        className: \"mapboxgl-ctrl mapboxgl-ctrl-group \".concat(className),\n        ref: this._containerRef,\n        style: style,\n        onContextMenu: function onContextMenu(e) {\n          return e.preventDefault();\n        }\n      }, this._renderButton('geolocate', 'Geolocate', this._onClickGeolocate)));\n    }\n  }]);\n\n  return GeolocateControl;\n}(BaseControl);\n\n_defineProperty(GeolocateControl, \"propTypes\", propTypes);\n\n_defineProperty(GeolocateControl, \"defaultProps\", defaultProps);\n\nexport { GeolocateControl as default };","map":{"version":3,"sources":["../../../src/components/geolocate-control.js"],"names":["LINEAR_TRANSITION_PROPS","TransitionManager","transitionDuration","noop","propTypes","BaseControl","className","PropTypes","style","positionOptions","fitBoundsOptions","trackUserLocation","showUserLocation","onViewStateChange","onViewportChange","func","defaultProps","GeolocateControl","supportsGeolocation","markerPosition","createRef","isGeolocationSupported","result","markerRef","geolocationWatchID","window","console","controlOptions","prop","mapboxgl","position","coords","center","radius","bounds","viewport","longitude","latitude","zoom","newViewState","mapState","viewState","Object","callback","e"],"mappings":"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","sourcesContent":["// @flow\n\n/* global window */\nimport React, {createRef} from 'react';\nimport PropTypes from 'prop-types';\nimport WebMercatorViewport from 'viewport-mercator-project';\n\nimport mapboxgl from '../utils/mapboxgl';\n\nimport BaseControl from './base-control';\nimport Marker from './marker';\nimport MapState from '../utils/map-state';\nimport TransitionManager from '../utils/transition-manager';\nimport {isGeolocationSupported} from '../utils/geolocate-utils';\n\nimport type {BaseControlProps} from './base-control';\n\nconst LINEAR_TRANSITION_PROPS = Object.assign({}, TransitionManager.defaultProps, {\n  transitionDuration: 500\n});\n\nconst noop = () => {};\n\nconst propTypes = Object.assign({}, BaseControl.propTypes, {\n  // Custom className\n  className: PropTypes.string,\n  style: PropTypes.object,\n\n  // mapbox geolocate options\n  // https://docs.mapbox.com/mapbox-gl-js/api/#geolocatecontrol\n  positionOptions: PropTypes.object,\n  fitBoundsOptions: PropTypes.object,\n  trackUserLocation: PropTypes.bool,\n  showUserLocation: PropTypes.bool,\n\n  // Callbacks fired when the user interacted with the map. The object passed to the callbacks\n  // contains viewport properties such as `longitude`, `latitude`, `zoom` etc.\n  onViewStateChange: PropTypes.func,\n  onViewportChange: PropTypes.func\n});\n\nconst defaultProps = Object.assign({}, BaseControl.defaultProps, {\n  className: '',\n  style: {},\n\n  // mapbox geolocate options\n  positionOptions: null,\n  fitBoundsOptions: null,\n  trackUserLocation: false,\n  showUserLocation: true\n});\n\nexport type GeolocateControlProps = BaseControlProps & {\n  className: string,\n  style: Object,\n  positionOptions: any,\n  fitBoundsOptions: any,\n  trackUserLocation: boolean,\n  showUserLocation: boolean,\n  onViewStateChange?: Function,\n  onViewportChange?: Function\n};\n\ntype Coordinate = {\n  longitude: number,\n  latitude: number,\n  accuracy: number\n};\ntype Position = {\n  coords: Coordinate\n};\ntype State = {\n  supportsGeolocation: boolean,\n  markerPosition: ?Coordinate\n};\n\nexport default class GeolocateControl extends BaseControl<\n  GeolocateControlProps,\n  State,\n  HTMLDivElement\n> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  state = {\n    supportsGeolocation: false,\n    markerPosition: null\n  };\n\n  _mapboxGeolocateControl: any = null;\n\n  _geolocateButtonRef: {current: null | HTMLButtonElement} = createRef();\n  _markerRef: {current: null | Marker} = createRef();\n\n  componentDidMount() {\n    isGeolocationSupported().then(result => {\n      this.setState({supportsGeolocation: result});\n      this._setupMapboxGeolocateControl(result);\n    });\n  }\n\n  componentDidUpdate() {\n    // MapboxGeolocateControl needs manipulate the style of Marker's container\n    const markerRef = this._markerRef.current;\n    if (this._mapboxGeolocateControl && markerRef) {\n      this._mapboxGeolocateControl._dotElement = markerRef._containerRef.current;\n    }\n  }\n\n  componentWillUnmount() {\n    // re-implement MapboxGeolocateControl's _onRemove\n    // clear the geolocation watch if exists\n    const geolocationWatchID = this._mapboxGeolocateControl._geolocationWatchID;\n    if (geolocationWatchID !== undefined) {\n      window.navigator.geolocation.clearWatch(geolocationWatchID);\n      this._mapboxGeolocateControl._geolocationWatchID = undefined;\n    }\n  }\n\n  _setupMapboxGeolocateControl = (supportsGeolocation: boolean) => {\n    if (!supportsGeolocation) {\n      /* eslint-disable no-console, no-undef */\n      console.warn(\n        'Geolocation support is not available, the GeolocateControl will not be visible.'\n      );\n      /* eslint-enable no-console, no-undef */\n      return;\n    }\n\n    const controlOptions = {};\n    ['positionOptions', 'fitBoundsOptions', 'trackUserLocation', 'showUserLocation'].forEach(\n      prop => {\n        // For null option, use Mapbox default value\n        if (prop in this.props && this.props[prop] !== null) {\n          controlOptions[prop] = this.props[prop];\n        }\n      }\n    );\n\n    this._mapboxGeolocateControl = new mapboxgl.GeolocateControl(controlOptions);\n\n    // the following re-implement MapboxGeolocateControl's _setupUI\n    // replace mapbox internal prop\n    this._mapboxGeolocateControl._watchState = 'OFF';\n\n    // replace mapbox internal UI elements\n    this._mapboxGeolocateControl._geolocateButton = this._geolocateButtonRef.current;\n\n    // replace mapbox internal methods\n    this._mapboxGeolocateControl._updateMarker = this._updateMarker;\n    this._mapboxGeolocateControl._updateCamera = this._updateCamera;\n\n    this._mapboxGeolocateControl._setup = true;\n  };\n\n  _onClickGeolocate = () => {\n    return this._mapboxGeolocateControl.trigger();\n  };\n\n  _updateMarker = (position: Position) => {\n    if (position) {\n      this.setState({markerPosition: position.coords});\n    }\n  };\n\n  _getBounds = (position: Position) => {\n    const center = new mapboxgl.LngLat(position.coords.longitude, position.coords.latitude);\n    const radius = position.coords.accuracy;\n    const bounds = center.toBounds(radius);\n\n    return [[bounds._ne.lng, bounds._ne.lat], [bounds._sw.lng, bounds._sw.lat]];\n  };\n\n  _updateCamera = (position: Position) => {\n    const {viewport} = this._context;\n\n    const bounds = this._getBounds(position);\n    const {longitude, latitude, zoom} = new WebMercatorViewport(viewport).fitBounds(bounds);\n\n    const newViewState = Object.assign({}, viewport, {\n      longitude,\n      latitude,\n      zoom\n    });\n    const mapState = new MapState(newViewState);\n    const viewState = Object.assign({}, mapState.getViewportProps(), LINEAR_TRANSITION_PROPS);\n\n    const onViewportChange = this.props.onViewportChange || this._context.onViewportChange || noop;\n    const onViewStateChange =\n      this.props.onViewStateChange || this._context.onViewStateChange || noop;\n\n    // Call new style callback\n    onViewStateChange({viewState});\n\n    // Call old style callback\n    onViewportChange(viewState);\n  };\n\n  _renderButton = (type: string, label: string, callback: Function) => {\n    return (\n      <button\n        key={type}\n        className={`mapboxgl-ctrl-icon mapboxgl-ctrl-${type}`}\n        ref={this._geolocateButtonRef}\n        type=\"button\"\n        title={label}\n        onClick={callback}\n      />\n    );\n  };\n\n  _renderMarker = () => {\n    const {showUserLocation} = this.props;\n    const {markerPosition} = this.state;\n    if (!showUserLocation || !markerPosition) {\n      return null;\n    }\n\n    return (\n      // $FlowFixMe\n      <Marker\n        key=\"location-maker\"\n        ref={this._markerRef}\n        className=\"mapboxgl-user-location-dot\"\n        longitude={markerPosition.longitude}\n        latitude={markerPosition.latitude}\n        onContextMenu={e => e.preventDefault()}\n        captureDrag={false}\n        captureDoubleClick={false}\n      />\n    );\n  };\n\n  _render() {\n    if (!this.state.supportsGeolocation) {\n      return null;\n    }\n\n    const {className, style} = this.props;\n    return (\n      <div>\n        {this._renderMarker()}\n        <div\n          key=\"geolocate-control\"\n          className={`mapboxgl-ctrl mapboxgl-ctrl-group ${className}`}\n          ref={this._containerRef}\n          style={style}\n          onContextMenu={e => e.preventDefault()}\n        >\n          {this._renderButton('geolocate', 'Geolocate', this._onClickGeolocate)}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}