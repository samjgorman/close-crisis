{"ast":null,"code":"var _jsxFileName = \"/Users/brianzeng/close/client/src/components/map/map.jsx\";\nimport React from 'react';\nimport MapGL, { Source, Layer } from 'react-map-gl';\nimport axios from 'axios';\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked_county: null,\n      latitude: 40.721086,\n      longitude: -120.629952,\n      width: \"50%\",\n      height: \"100%\",\n      zoom: 10,\n      cases_layer: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      latitude: 40.721086,\n      longitude: -120.629952,\n      width: \"100vw\",\n      height: \"100vh\",\n      zoom: 10\n    });\n  }\n\n  setViewport(viewport) {\n    this.setState({\n      latitude: viewport.latitude,\n      longitude: viewport.longitude,\n      width: viewport.width,\n      height: viewport.height,\n      zoom: viewport.zoom\n    });\n  }\n\n  getViewport() {\n    return {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      width: this.state.width,\n      height: this.state.height,\n      zoom: this.state.zoom\n    };\n  } //   map.addSource('point', {\n  //     'type': 'geojson',\n  //     'data': pointOnCircle(0)\n  //     });\n  //     map.addLayer({\n  //     'id': 'point',\n  //     'source': 'point',\n  //     'type': 'circle',\n  //     'paint': {\n  //     'circle-radius': 10,\n  //     'circle-color': '#007cbf'\n  //     }\n  //     });\n  // <Source id=\"my-data\" type=\"geojson\" data={geojson}>\n  //           <Layer\n  //             id=\"point\"\n  //             type=\"circle\"\n  //             paint={{\n  //               'circle-radius': 10,\n  //               'circle-color': '#007cbf'\n  //             }} />\n  //         </Source>\n  // const geojson = {\n  //     type: 'FeatureCollection',\n  //     features: [\n  //       {type: 'Feature', geometry: {type: 'Point', coordinates: [-122.4, 37.8]}}\n  //     ]\n  //   };\n  //   makeCircle(county, latitude, longitude, cases) {\n  //       let source = this.makeSource(county, latitude, longitude);\n  //       let layer = this.makeLayer(county, cases);\n  //       source.props.children.push(layer);\n  //       return source;\n  //   }\n\n\n  makeSource(county, latitude, longitude) {\n    let source_properties = {\n      id: county + \"_source\",\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [latitude, longitude]\n          }\n        }]\n      }\n    };\n    return /*#__PURE__*/React.createElement(Source, Object.assign({}, source_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  makeLayer(county, cases) {\n    let layer_properties = {\n      id: county + \"_layer\",\n      type: \"circle\",\n      paint: {\n        'circle-radius': 10,\n        'circle-color': '#0282828'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Layer, Object.assign({}, layer_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }));\n  } //   updateCasesLayer() {\n  //       axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(\n  //           (response) => {\n  //             let build_cases_layer = []\n  //             build_cases_layer.push(\n  //                 this.makeCircle(\"LA\", 40.721086, -120.629952, 123)\n  //             )\n  //             this.setState({\n  //                 cases_layer: build_cases_layer\n  //             })\n  //           }\n  //       ).catch(\n  //           (err) => {\n  //               console.log(err);\n  //           }\n  //       )\n  //   }\n\n\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport();\n    return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n      mapboxApiAccessToken: mapbox_token,\n      onViewportChange: viewport => {\n        this.setViewport(viewport);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/brianzeng/close/client/src/components/map/map.jsx"],"names":["React","MapGL","Source","Layer","axios","Map","Component","constructor","props","state","clicked_county","latitude","longitude","width","height","zoom","cases_layer","componentDidMount","setState","setViewport","viewport","getViewport","makeSource","county","source_properties","id","type","data","features","geometry","coordinates","makeLayer","cases","layer_properties","paint","render","mapbox_token"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MapGL, {Source, Layer} from 'react-map-gl';\nimport axios from 'axios';\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        clicked_county: null,\n        latitude: 40.721086,\n        longitude: -120.629952,\n        width: \"50%\",\n        height: \"100%\",\n        zoom: 10,\n        cases_layer: null\n    };\n\n  }\n\n  componentDidMount() {\n    this.setState({\n        latitude: 40.721086,\n        longitude: -120.629952,\n        width: \"100vw\",\n        height: \"100vh\",\n        zoom: 10,\n    });\n  }\n\n\n  \n  setViewport(viewport) {\n    this.setState({\n        latitude: viewport.latitude, \n        longitude: viewport.longitude, \n        width: viewport.width,\n        height: viewport.height,\n        zoom: viewport.zoom\n    })\n  }\n\n  getViewport() {\n    return {\n        latitude: this.state.latitude, \n        longitude: this.state.longitude, \n        width: this.state.width,\n        height: this.state.height,\n        zoom: this.state.zoom\n    }\n  }\n\n\n//   map.addSource('point', {\n//     'type': 'geojson',\n//     'data': pointOnCircle(0)\n//     });\n     \n//     map.addLayer({\n//     'id': 'point',\n//     'source': 'point',\n//     'type': 'circle',\n//     'paint': {\n//     'circle-radius': 10,\n//     'circle-color': '#007cbf'\n//     }\n//     });\n\n// <Source id=\"my-data\" type=\"geojson\" data={geojson}>\n//           <Layer\n//             id=\"point\"\n//             type=\"circle\"\n//             paint={{\n//               'circle-radius': 10,\n//               'circle-color': '#007cbf'\n//             }} />\n//         </Source>\n\n// const geojson = {\n//     type: 'FeatureCollection',\n//     features: [\n//       {type: 'Feature', geometry: {type: 'Point', coordinates: [-122.4, 37.8]}}\n//     ]\n//   };\n\n//   makeCircle(county, latitude, longitude, cases) {\n//       let source = this.makeSource(county, latitude, longitude);\n//       let layer = this.makeLayer(county, cases);\n//       source.props.children.push(layer);\n//       return source;\n//   }\n\n  makeSource(county, latitude, longitude) {\n    let source_properties = {\n        id: county + \"_source\", \n        type: 'geojson', \n        data: {\n            type: 'FeatureCollection', \n            features: [\n                {\n                    type: 'Feature', \n                    geometry: {\n                        type: 'Point', \n                        coordinates: [latitude, longitude]\n                    }\n                }\n            ]\n        }\n    }\n    return (\n        <Source {...source_properties} />\n    )\n  }\n\n  makeLayer(county, cases) {\n    let layer_properties = {\n        id: county + \"_layer\", \n        type: \"circle\", \n        paint: {\n            'circle-radius': 10, \n            'circle-color': '#0282828'\n        }\n    }\n\n    return (\n        <Layer {...layer_properties} />\n    )\n  }\n  \n\n  \n//   updateCasesLayer() {\n//       axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(\n//           (response) => {\n//             let build_cases_layer = []\n//             build_cases_layer.push(\n//                 this.makeCircle(\"LA\", 40.721086, -120.629952, 123)\n//             )\n//             this.setState({\n//                 cases_layer: build_cases_layer\n//             })\n//           }\n//       ).catch(\n//           (err) => {\n//               console.log(err);\n//           }\n//       )\n//   }\n  \n  render() {\n\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport();\n    return (\n        <MapGL \n            {...viewport} \n            mapboxApiAccessToken={mapbox_token} \n            onViewportChange={(viewport) => { this.setViewport(viewport)}}\n        >\n        </MapGL>\n    );\n  }\n    \n}\n\n  \n  \n  \n\n\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}