{"ast":null,"code":"var _jsxFileName = \"/Users/brianzeng/close/client/src/components/map/map.jsx\";\nimport React from 'react';\nimport MapGL, { Source, Layer, Popup, GeolocateControl, NavigationControl } from 'react-map-gl';\nimport axios from 'axios';\nimport boundary_data from './ca_boundaries.json';\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected_county: null,\n      latitude: 34.196398,\n      //default for LA\n      longitude: -118.261862,\n      //default for LA\n      width: \"50vw\",\n      height: \"100vh\",\n      zoom: 10,\n      maxBounds: [[-74.04728500751165, 40.68392799015035], //SW coordinates\n      [-73.91058699000139, 40.87764500765852] //NE\n      ],\n      cases_layer: null,\n      interactiveLayerIds: null,\n      all_county_info: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateCasesLayer();\n  }\n\n  setViewport(viewport) {\n    this.setState({\n      latitude: viewport.latitude,\n      longitude: viewport.longitude,\n      zoom: viewport.zoom\n    });\n  }\n\n  getViewport() {\n    return {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      width: this.state.width,\n      height: this.state.height,\n      zoom: this.state.zoom,\n      maxBounds: this.state.maxBounds\n    };\n  }\n\n  makeSource(county, latitude, longitude, severity) {\n    let source_properties = {\n      id: county,\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [longitude, latitude]\n          }\n        }]\n      }\n    };\n    return /*#__PURE__*/React.createElement(Source, Object.assign({\n      key: county\n    }, source_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), this.makeLayer(county, severity));\n  }\n\n  makeLayer(county, severity) {\n    let layer_properties = {\n      id: county,\n      type: \"circle\",\n      paint: {\n        'circle-radius': severity * 2,\n        'circle-color': '#ffa700',\n        'circle-opacity': 0.3,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#ffa700'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Layer, Object.assign({}, layer_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  makeCountyBoundaries() {\n    let source_properties = {\n      id: 'california',\n      type: 'geojson',\n      data: boundary_data\n    };\n    let layer_properties = {\n      'id': 'california',\n      'type': 'line',\n      'source': 'california',\n      'layout': {},\n      'paint': {\n        'line-color': '#414141'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Source, Object.assign({\n      id: \"california\",\n      key: \"california\"\n    }, source_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Layer, Object.assign({}, layer_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    })));\n  }\n\n  updateCasesLayer() {\n    axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(response => {\n      let build_cases_layer = [];\n      let counties = [];\n\n      for (let i = 0; i < response.data.items.length; ++i) {\n        let county_info = response.data.items[i];\n        let circle = this.makeSource(county_info.county, county_info.lat, county_info.lon, county_info.severity);\n        build_cases_layer.push(circle);\n        counties.push(county_info.county);\n      }\n\n      this.setState({\n        cases_layer: build_cases_layer,\n        interactiveLayerIds: counties\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  onClickCounty(event) {\n    event.preventDefault();\n    let feature = event.features[0];\n    console.log(event);\n\n    if (feature === undefined || feature.source === undefined) {\n      this.setState({\n        selected_county: null\n      });\n      return;\n    }\n\n    this.setState({\n      selected_county: feature\n    });\n    this.props.mapOnClick(feature.source);\n  }\n\n  makePopup(county, latitude, longitude) {}\n\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport(); //vvv copied from github\n\n    const geolocateStyle = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      margin: 10\n    };\n    const navStyle = {\n      position: 'absolute',\n      top: 36,\n      left: 0,\n      padding: '10px'\n    }; //^^^ copied from github\n\n    return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n      mapboxApiAccessToken: mapbox_token,\n      onViewportChange: viewport => {\n        this.setViewport(viewport);\n      },\n      interactiveLayerIds: this.state.interactiveLayerIds,\n      onClick: event => {\n        this.onClickCounty(event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }), this.state.cases_layer, this.state.selected_county ? /*#__PURE__*/React.createElement(Popup, {\n      latitude: this.state.selected_county.geometry.coordinates[1],\n      longitude: this.state.selected_county.geometry.coordinates[0],\n      closeOnClick: true,\n      onClose: () => this.setState({\n        selected_county: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }) : null, /*#__PURE__*/React.createElement(GeolocateControl, {\n      style: geolocateStyle,\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: navStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavigationControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    })), this.makeCountyBoundaries());\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/brianzeng/close/client/src/components/map/map.jsx"],"names":["React","MapGL","Source","Layer","Popup","GeolocateControl","NavigationControl","axios","boundary_data","Map","Component","constructor","props","state","selected_county","latitude","longitude","width","height","zoom","maxBounds","cases_layer","interactiveLayerIds","all_county_info","componentDidMount","updateCasesLayer","setViewport","viewport","setState","getViewport","makeSource","county","severity","source_properties","id","type","data","features","geometry","coordinates","makeLayer","layer_properties","paint","makeCountyBoundaries","get","then","response","build_cases_layer","counties","i","items","length","county_info","circle","lat","lon","push","catch","err","console","log","onClickCounty","event","preventDefault","feature","undefined","source","mapOnClick","makePopup","render","mapbox_token","geolocateStyle","position","top","left","margin","navStyle","padding","enableHighAccuracy"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MapGL, {Source, Layer, Popup, GeolocateControl, NavigationControl} from 'react-map-gl';\nimport axios from 'axios';\nimport boundary_data from './ca_boundaries.json';\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        selected_county: null,\n        latitude: 34.196398, //default for LA\n        longitude: -118.261862, //default for LA\n        width: \"50vw\",\n        height: \"100vh\",\n        zoom: 10,\n        maxBounds: [\n            [-74.04728500751165, 40.68392799015035], //SW coordinates\n            [-73.91058699000139, 40.87764500765852] //NE\n        ],\n        cases_layer: null, \n        interactiveLayerIds: null, \n        all_county_info: null\n    };\n\n  }\n\n  componentDidMount() {\n\n    this.updateCasesLayer();\n  }\n  \n  setViewport(viewport) {\n    this.setState({\n        latitude: viewport.latitude, \n        longitude: viewport.longitude, \n\n        zoom: viewport.zoom\n    })\n  }\n\n  getViewport() {\n    return {\n        latitude: this.state.latitude, \n        longitude: this.state.longitude, \n        width: this.state.width,\n        height: this.state.height,\n        zoom: this.state.zoom,\n        maxBounds: this.state.maxBounds\n    }\n  }\n\n  makeSource(county, latitude, longitude, severity) {\n    let source_properties = {\n        id: county, \n        type: 'geojson', \n        data: {\n            type: 'FeatureCollection', \n            features: [\n                {\n                    type: 'Feature', \n                    geometry: {\n                        type: 'Point', \n                        coordinates: [longitude, latitude]\n                    },\n                }\n            ]\n        }\n    }\n    return (\n        <Source key={county} {...source_properties}>\n            {this.makeLayer(county, severity)}\n        </Source>\n    )\n  }\n\n  makeLayer(county, severity) {\n\n    let layer_properties = {\n        id: county, \n        type: \"circle\", \n        paint: {\n            'circle-radius': severity*2, \n            'circle-color': '#ffa700', \n            'circle-opacity': 0.3, \n            'circle-stroke-width': 1, \n            'circle-stroke-color': '#ffa700'\n   \n        }\n    }\n\n    return (\n            <Layer {...layer_properties}>\n            </Layer>\n    )\n  }\n  \n\n  makeCountyBoundaries() {\n      let source_properties = {\n        id: 'california',\n        type: 'geojson',\n        data: boundary_data\n      }\n\n      let layer_properties = {\n        'id': 'california',\n        'type': 'line',\n        'source': 'california',\n        'layout': {},\n        'paint': {\n            'line-color': '#414141'\n        }\n      }\n    \n      return (\n        <Source id='california' key='california' {...source_properties} >\n            <Layer {...layer_properties} />\n        </Source>\n      );\n      \n      \n      \n  }\n  updateCasesLayer() {\n      axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(\n          (response) => {\n            let build_cases_layer = [];\n            let counties = [];\n            for(let i = 0; i < response.data.items.length; ++i) {\n                let county_info = response.data.items[i];\n                let circle = this.makeSource(county_info.county, county_info.lat, county_info.lon, county_info.severity);\n                build_cases_layer.push(circle);\n                counties.push(county_info.county);\n            }\n\n            this.setState({\n                cases_layer: build_cases_layer,\n                interactiveLayerIds: counties\n            })\n          }\n      ).catch(\n          (err) => {\n              console.log(err);\n          }\n      )\n  }\n\n  onClickCounty(event) {\n    event.preventDefault();\n    let feature = event.features[0];\n    console.log(event)\n    if(feature === undefined || feature.source === undefined) {\n        this.setState({\n            selected_county: null\n        })\n        return;\n    }\n    \n    this.setState({\n        selected_county: feature\n    })\n    this.props.mapOnClick(feature.source);\n  }\n\n \n  makePopup(county, latitude, longitude) {\n\n  }\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport();\n\n\n    //vvv copied from github\n    const geolocateStyle = {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        margin: 10\n      };\n\n      const navStyle = {\n        position: 'absolute',\n        top: 36,\n        left: 0,\n        padding: '10px'\n      };\n    //^^^ copied from github\n\n    return (\n        <MapGL \n            {...viewport} \n            mapboxApiAccessToken={mapbox_token} \n            onViewportChange={(viewport) => { this.setViewport(viewport)}}\n            interactiveLayerIds={this.state.interactiveLayerIds}\n            onClick={(event) => {this.onClickCounty(event)}}\n        >\n            {this.state.cases_layer}\n\n            {this.state.selected_county ? \n                (\n                    <Popup \n                        latitude={this.state.selected_county.geometry.coordinates[1]} \n                        longitude={this.state.selected_county.geometry.coordinates[0]}\n                        closeOnClick={true}\n                        onClose={() => this.setState({selected_county: null})}\n                    />\n                ) : null\n            }\n\n            <GeolocateControl\n                style={geolocateStyle}\n                positionOptions={{enableHighAccuracy: true}}\n                trackUserLocation={true}\n            />\n            <div style={navStyle}>\n                <NavigationControl />\n            </div>\n\n            {this.makeCountyBoundaries()}\n\n        </MapGL>\n    );\n  }\n    \n}\n\n  \n  \n  \n\n\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}