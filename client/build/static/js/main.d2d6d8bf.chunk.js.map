{"version":3,"sources":["logo.svg","components/addphone.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddPhone","props","submitHandler","e","preventDefault","axios","post","phone","state","then","response","console","log","setState","onError","catch","error","copied","className","onSubmit","this","defaultCountry","placeholder","value","onChange","type","Component","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,4PCmF1BC,E,kDApEb,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAUVC,cAAgB,SAAAC,GACZA,EAAEC,iBACFC,IAAMC,KAAN,SAAqB,CACjBC,MAAO,EAAKC,MAAMD,QAGnBE,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACV,EAAKG,SAAS,CAACC,SAAS,OAE3BC,OAAM,SAACC,GACNL,QAAQC,IAAII,GACV,EAAKH,SAAS,CAACC,SAAS,QArB1B,EAAKN,MAAQ,CACTD,MAAO,GACPU,QAAQ,GAJF,E,qDAuCR,IAAD,OACL,OACI,yBAAKC,UAAY,iBACjB,yBAAKA,UAAY,WAAjB,4BACA,0BAAMC,SAAWC,KAAKlB,cAAegB,UAAY,QAG7C,kBAAC,IAAD,CACIG,eAAgB,KAChBC,YAAc,0BACdC,MAAOH,KAAKZ,MAAMD,MAClBiB,SAAU,SAAAjB,GAAK,OAAI,EAAKM,SAAS,CAAEN,aAEvC,4BAAQkB,KAAO,SAASP,UAAY,cAApC,c,GAtDOQ,aCiBRC,MAxBf,WACE,OACE,yBAAKT,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKU,IAAKC,IAAMX,UAAU,WAAWY,IAAI,SACzC,mCACO,4CADP,wBAGA,kBAAC,EAAD,MACA,uBAAGC,KAAK,sFAAR,eAEA,uBACEb,UAAU,WACVa,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMiC,c","file":"static/js/main.d2d6d8bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react'; \n// import '../components/addOpp.css';\nimport 'react-phone-number-input/style.css'\nimport PhoneInput from 'react-phone-number-input'\nimport axios from 'axios';\n\n\n//refactor into a controlled component \n//on click, go grey\n//or on click, disappear\n//on hover for add, go blue\n//Make long for add button\n\nclass AddPhone extends Component{\n\n    constructor(props){\n        super(props);\n            this.state = {\n                phone: \"\",\n                copied: false\n            };\n        }\n    // changeHandler = e => {\n    //     this.setState({phone: e.target.value});\n    // }\n\n    submitHandler = e => {\n        e.preventDefault()\n        axios.post(`/phone`, {\n            phone: this.state.phone,\n          })\n          \n          .then((response)=>{\n            console.log(response);\n              this.setState({onError: false});\n         })\n          .catch((error)=>{\n            console.log(error);\n              this.setState({onError: true});\n         });\n        // console.log(\"should input test data\" +this.state.phone)\n        // fetch('/api/phone', {\n        //     method: 'POST',\n        //     headers: {\n        //         'Accept': 'application/json',\n        //         'Content-Type': 'application/json',\n        //     },\n        //     body: JSON.stringify({\n        //         \"phone\": this.state.phone\n        //     })\n        //     })\n        //     this.setState({copied: true});\n    }\n     \n    render() {\n        return (\n            <div className = \"FormContainer\"> \n            <div className = \"OppText\">Enter your phone number </div>\n            <form onSubmit= {this.submitHandler} className = \"Form\">\n                {/* <input className = \"FormInput\" type = \"text\" placeholder = \"Your Phone Number\" value ={this.state.name} onChange = {this.changeHandler}>\n                </input> */}\n                <PhoneInput\n                    defaultCountry={'US'}\n                    placeholder = \"Enter your phone number\"\n                    value={this.state.phone}\n                    onChange={phone => this.setState({ phone })}\n                />\n                <button type = \"submit\" className = \"FormButton\" > Add\n                </button>\n            </form>\n            {/* {this.state.copied ? \n                    <React.Fragment>\n                     <ConfirmButton\n                     text = \"Sent to Peerlift!\"\n                     visible = {false}\n                     ></ConfirmButton>\n                      </React.Fragment>\n                     : null} */}\n            </div>\n        );\n    }\n  }\n  \n  export default AddPhone;\n  //notee: myClick goes nowhere","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddPhone from './components/addphone.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <AddPhone></AddPhone>\n        <a href='itms-services://?action=download-manifest&amp;url=https://closecrisis.com/close.plist\n          '>Littol link</a>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}