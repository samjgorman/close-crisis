{"ast":null,"code":"var _jsxFileName = \"/Users/brianzeng/close/client/src/components/map/map.jsx\";\nimport React from 'react';\nimport MapGL, { Source, Layer, Popup, GeolocateControl } from 'react-map-gl';\nimport axios from 'axios';\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected_county: null,\n      latitude: 40.721086,\n      longitude: -120.629952,\n      width: \"10vw\",\n      height: \"100%\",\n      zoom: 10,\n      cases_layer: null,\n      interactiveLayerIds: null,\n      all_county_info: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      latitude: 40.721086,\n      longitude: -120.629952,\n      width: \"100vw\",\n      height: \"100vh\",\n      zoom: 10\n    });\n    this.updateCasesLayer();\n  }\n\n  setViewport(viewport) {\n    this.setState({\n      latitude: viewport.latitude,\n      longitude: viewport.longitude,\n      width: viewport.width,\n      height: viewport.height,\n      zoom: viewport.zoom\n    });\n  }\n\n  getViewport() {\n    return {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      width: this.state.width,\n      height: this.state.height,\n      zoom: this.state.zoom\n    };\n  }\n\n  makeSource(county, latitude, longitude, cases) {\n    let source_properties = {\n      id: county,\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [longitude, latitude]\n          }\n        }]\n      }\n    };\n    return /*#__PURE__*/React.createElement(Source, Object.assign({\n      key: county\n    }, source_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), this.makeLayer(county, cases));\n  }\n\n  makeLayer(county, cases) {\n    let layer_properties = {\n      id: county,\n      type: \"circle\",\n      paint: {\n        'circle-radius': cases / 75,\n        'circle-color': '#ffa700',\n        'circle-opacity': 0.3,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#ffa700'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Layer, Object.assign({}, layer_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  updateCasesLayer() {\n    axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(response => {\n      let build_cases_layer = [];\n      let counties = [];\n\n      for (let i = 0; i < response.data.items.length; ++i) {\n        let county_info = response.data.items[i];\n        let circle = this.makeSource(county_info.county, county_info.lat, county_info.lon, county_info.cases);\n        build_cases_layer.push(circle);\n        counties.push(county_info.county);\n      }\n\n      this.setState({\n        cases_layer: build_cases_layer,\n        interactiveLayerIds: counties\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  onClickCounty(event) {\n    let feature = event.features[0];\n    console.log(event);\n\n    if (feature === undefined || feature.source === undefined) {\n      this.setState({\n        selected_county: null\n      });\n      return;\n    }\n\n    this.setState({\n      selected_county: feature\n    });\n    this.props.mapOnClick(feature.source);\n  }\n\n  makePopup(county, latitude, longitude) {}\n\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport();\n    const geolocateStyle = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      margin: 10\n    };\n    return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n      mapboxApiAccessToken: mapbox_token,\n      onViewportChange: viewport => {\n        this.setViewport(viewport);\n      },\n      interactiveLayerIds: this.state.interactiveLayerIds,\n      onClick: event => {\n        this.onClickCounty(event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }), this.state.cases_layer, this.state.selected_county ? /*#__PURE__*/React.createElement(Popup, {\n      latitude: this.state.selected_county.geometry.coordinates[1],\n      longitude: this.state.selected_county.geometry.coordinates[0],\n      onClose: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }\n    }) : null, /*#__PURE__*/React.createElement(GeolocateControl, {\n      style: geolocateStyle,\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/brianzeng/close/client/src/components/map/map.jsx"],"names":["React","MapGL","Source","Layer","Popup","GeolocateControl","axios","Map","Component","constructor","props","state","selected_county","latitude","longitude","width","height","zoom","cases_layer","interactiveLayerIds","all_county_info","componentDidMount","setState","updateCasesLayer","setViewport","viewport","getViewport","makeSource","county","cases","source_properties","id","type","data","features","geometry","coordinates","makeLayer","layer_properties","paint","get","then","response","build_cases_layer","counties","i","items","length","county_info","circle","lat","lon","push","catch","err","console","log","onClickCounty","event","feature","undefined","source","mapOnClick","makePopup","render","mapbox_token","geolocateStyle","position","top","left","margin","enableHighAccuracy"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MapGL, {Source, Layer, Popup, GeolocateControl} from 'react-map-gl';\nimport axios from 'axios';\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        selected_county: null,\n        latitude: 40.721086,\n        longitude: -120.629952,\n        width: \"10vw\",\n        height: \"100%\",\n        zoom: 10,\n        cases_layer: null, \n        interactiveLayerIds: null, \n        all_county_info: null\n    };\n\n  }\n\n  componentDidMount() {\n    this.setState({\n        latitude: 40.721086,\n        longitude: -120.629952,\n        width: \"100vw\",\n        height: \"100vh\",\n        zoom: 10,\n    });\n    this.updateCasesLayer();\n  }\n  \n  setViewport(viewport) {\n    this.setState({\n        latitude: viewport.latitude, \n        longitude: viewport.longitude, \n        width: viewport.width,\n        height: viewport.height,\n        zoom: viewport.zoom\n    })\n  }\n\n  getViewport() {\n    return {\n        latitude: this.state.latitude, \n        longitude: this.state.longitude, \n        width: this.state.width,\n        height: this.state.height,\n        zoom: this.state.zoom\n    }\n  }\n\n  makeSource(county, latitude, longitude, cases) {\n    let source_properties = {\n        id: county, \n        type: 'geojson', \n        data: {\n            type: 'FeatureCollection', \n            features: [\n                {\n                    type: 'Feature', \n                    geometry: {\n                        type: 'Point', \n                        coordinates: [longitude, latitude]\n                    },\n                }\n            ]\n        }\n    }\n    return (\n        <Source key={county} {...source_properties}>\n            {this.makeLayer(county, cases)}\n        </Source>\n    )\n  }\n\n  makeLayer(county, cases) {\n\n    let layer_properties = {\n        id: county, \n        type: \"circle\", \n        paint: {\n            'circle-radius': cases/75, \n            'circle-color': '#ffa700', \n            'circle-opacity': 0.3, \n            'circle-stroke-width': 1, \n            'circle-stroke-color': '#ffa700'\n   \n        }\n    }\n\n    return (\n            <Layer {...layer_properties}>\n            </Layer>\n    )\n  }\n  \n  updateCasesLayer() {\n      axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(\n          (response) => {\n            let build_cases_layer = [];\n            let counties = [];\n            for(let i = 0; i < response.data.items.length; ++i) {\n                let county_info = response.data.items[i];\n                let circle = this.makeSource(county_info.county, county_info.lat, county_info.lon, county_info.cases);\n                build_cases_layer.push(circle);\n                counties.push(county_info.county);\n            }\n\n            this.setState({\n                cases_layer: build_cases_layer,\n                interactiveLayerIds: counties\n            })\n          }\n      ).catch(\n          (err) => {\n              console.log(err);\n          }\n      )\n  }\n\n  onClickCounty(event) {\n    let feature = event.features[0];\n\n    console.log(event)\n    if(feature === undefined || feature.source === undefined) {\n        this.setState({\n            selected_county: null\n        })\n        return;\n    }\n    \n    this.setState({\n        selected_county: feature\n    })\n    this.props.mapOnClick(feature.source);\n  }\n\n \n  makePopup(county, latitude, longitude) {\n\n  }\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport();\n\n    const geolocateStyle = {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        margin: 10\n      };\n    return (\n        <MapGL \n            {...viewport} \n            mapboxApiAccessToken={mapbox_token} \n            onViewportChange={(viewport) => { this.setViewport(viewport)}}\n            interactiveLayerIds={this.state.interactiveLayerIds}\n            onClick={(event) => {this.onClickCounty(event)}}\n        >\n            {this.state.cases_layer}\n\n            {this.state.selected_county ? \n                (\n                    <Popup \n                        latitude={this.state.selected_county.geometry.coordinates[1]} \n                        longitude={this.state.selected_county.geometry.coordinates[0]}\n                        onClose={true}\n                    />\n                ) : null\n            }\n\n\n\n            <GeolocateControl\n                style={geolocateStyle}\n                positionOptions={{enableHighAccuracy: true}}\n                trackUserLocation={true}\n            />\n\n        </MapGL>\n    );\n  }\n    \n}\n\n  \n  \n  \n\n\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}