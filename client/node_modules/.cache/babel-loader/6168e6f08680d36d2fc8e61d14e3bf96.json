{"ast":null,"code":"var _jsxFileName = \"/Users/brianzeng/close/client/src/components/map/map.jsx\";\nimport React from 'react';\nimport MapGL, { Source, Layer, Popup, GeolocateControl, NavigationControl, FlyToInterpolator } from 'react-map-gl';\nimport axios from 'axios';\nimport boundary_data from './ca_boundaries.json';\nimport StatisticsView from '../statisticsView/statisticsView.js';\nimport MediaQuery from 'react-media';\nimport { Link } from 'react-router-dom';\nimport './map.css';\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected_county: this.props.selected_county,\n      latitude: 36.7783,\n      //° N, 119.4179° Wthis.props.latitude, //default for LA\n      longitude: -119.4179,\n      //this.props.longitude, //default for LA\n      width: \"100%\",\n      height: \"50em\",\n      zoom: 5,\n      minZoom: 5,\n      cases_layer: null,\n      interactiveLayerIds: null,\n      all_county_info: null,\n      cases: null,\n      deaths: null,\n      new_cases: null,\n      new_deaths: null,\n      hover_county: null,\n      hover_latitude: null,\n      hover_longitude: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateCasesLayer();\n  }\n\n  componentDidUpdate(prev_props) {\n    if (prev_props.selected_county !== this.props.selected_county) {\n      // this.setState({\n      //     latitude: this.props.latitude, \n      //     longitude: this.props.longitude,\n      //     zoom: 7,\n      //     transitionInterpolator: new FlyToInterpolator({speed: 1.2}),\n      //     transitionDuration: 'auto', \n      // });\n      //^^deprecated above camer operation\n      this.setState({\n        selected_county: this.props.selected_county\n      });\n    }\n  }\n\n  setViewport(viewport) {\n    let max_latitude = 36;\n    let min_latitude = 35.5;\n    let min_longitude = -119.6;\n    let max_longitude = -118;\n    /**\n     * the 4 if statements below restrict panning\n     * react-mapbox-gl doesn't seem to have the maxBounds prop, \n     * so had to custom implement\n     */\n\n    if (viewport.latitude > max_latitude) {\n      viewport.latitude = max_latitude;\n    }\n\n    if (viewport.latitude < min_latitude) {\n      viewport.latitude = min_latitude;\n    }\n\n    if (viewport.longitude > max_longitude) {\n      viewport.longitude = max_longitude;\n    }\n\n    if (viewport.longitude < min_longitude) {\n      viewport.longitude = min_longitude;\n    }\n\n    this.setState({\n      latitude: viewport.latitude,\n      longitude: viewport.longitude,\n      zoom: viewport.zoom,\n      transitionInterpolator: null,\n      transitionDuration: null\n    });\n  }\n\n  getViewport() {\n    return {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      width: this.state.width,\n      height: this.state.height,\n      zoom: this.state.zoom,\n      minZoom: this.state.minZoom,\n      transitionInterpolator: this.state.transitionInterpolator,\n      transitionDuration: this.state.transitionDuration\n    };\n  }\n\n  makeSource(county, latitude, longitude, severity) {\n    let source_properties = {\n      id: county,\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [longitude, latitude]\n          }\n        }]\n      }\n    };\n    return /*#__PURE__*/React.createElement(Source, Object.assign({\n      key: county\n    }, source_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }), this.makeLayer(county, severity));\n  }\n\n  makeLayer(county, severity) {\n    if (severity != 0 && severity < 100) {\n      severity = 100;\n    }\n\n    if (severity > 2000) {\n      severity = 2000;\n    }\n\n    let layer_properties = {\n      id: county,\n      type: \"circle\",\n      paint: {\n        'circle-radius': severity / 30,\n        'circle-color': '#ffa700',\n        'circle-opacity': 0.3,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#ffa700'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Layer, Object.assign({}, layer_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  makeCountyBoundaries() {\n    let source_properties = {\n      id: 'california',\n      type: 'geojson',\n      data: boundary_data\n    };\n    let layer_properties = {\n      'id': 'california',\n      'type': 'line',\n      'source': 'california',\n      'layout': {},\n      'paint': {\n        'line-color': '#414141'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Source, Object.assign({\n      id: \"california\",\n      key: \"california\"\n    }, source_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Layer, Object.assign({}, layer_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    })));\n  }\n\n  updateCasesLayer() {\n    axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(response => {\n      let build_cases_layer = [];\n      let counties = [];\n\n      for (let i = 0; i < response.data.items.length; ++i) {\n        let county_info = response.data.items[i];\n        let circle = this.makeSource(county_info.county, county_info.lat, county_info.lon, county_info.cases);\n        build_cases_layer.push(circle);\n        counties.push(county_info.county);\n      }\n\n      this.setState({\n        cases_layer: build_cases_layer,\n        interactiveLayerIds: counties\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  onClickCounty(event) {\n    event.preventDefault();\n    let feature = event.features[0];\n\n    if (feature === undefined || feature.source === undefined) {\n      return;\n    }\n\n    this.props.mapOnClick(feature.source, feature.geometry.coordinates[0], feature.geometry.coordinates[1]);\n    return;\n    this.setState({\n      selected_county: feature.source // latitude: feature.geometry.coordinates[1], \n      // longitude: feature.geometry.coordinates[0], \n      // transitionInterpolator: new FlyToInterpolator({speed: 1.2}),\n      // transitionDuration: 'auto', \n      // zoom: 7\n      //deprecated the above camera pan animation\n\n    }, () => {\n      this.props.mapOnClick(feature.source, feature.geometry.coordinates[0], feature.geometry.coordinates[1]);\n    });\n  }\n\n  onCountyEnter(event) {\n    return; //below deprecated for now\n\n    console.log(event);\n    event.preventDefault();\n    this.setState({\n      hover_county: \"testing\",\n      hover_latitude: event.lngLat[1],\n      hover_longitude: event.lngLat[0]\n    });\n  }\n\n  onCountyLeave() {\n    return; //below deperecated for now;\n\n    this.setState({\n      hover_county: null,\n      hover_latitude: null,\n      hover_longitude: null\n    });\n  }\n\n  makePopup(county, latitude, longitude) {\n    return /*#__PURE__*/React.createElement(Popup, {\n      latitude: latitude,\n      longitude: longitude,\n      closeButton: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }\n    }, county));\n  }\n\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport(); //vvv copied from github\n\n    const geolocateStyle = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      margin: 10\n    };\n    const navStyle = {\n      position: 'absolute',\n      top: 36,\n      left: 0,\n      padding: '10px'\n    }; //^^^ copied from  github\n    //Todo: undelete statisticsView\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Map-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n      mapboxApiAccessToken: mapbox_token,\n      onViewportChange: viewport => {\n        this.setViewport(viewport);\n      },\n      interactiveLayerIds: this.state.interactiveLayerIds,\n      onClick: event => {\n        this.onClickCounty(event);\n      },\n      mapStyle: \"mapbox://styles/mapbox/dark-v10\",\n      onMouseEnter: event => this.onCountyEnter(event),\n      onMouseLeave: () => this.onCountyLeave(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }\n    }), this.state.cases_layer, this.state.hover_county !== null ? this.makePopup(this.state.hover_county, this.state.hover_latitude, this.state.hover_longitude) : null, this.state.selected_county !== \"No county chosen\" && this.state.selected_county !== null ? this.makePopup(this.props.selected_county, this.props.latitude, this.props.longitude) : null, /*#__PURE__*/React.createElement(GeolocateControl, {\n      style: geolocateStyle,\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: navStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NavigationControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 21\n      }\n    })), this.makeCountyBoundaries()));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/brianzeng/close/client/src/components/map/map.jsx"],"names":["React","MapGL","Source","Layer","Popup","GeolocateControl","NavigationControl","FlyToInterpolator","axios","boundary_data","StatisticsView","MediaQuery","Link","Map","Component","constructor","props","state","selected_county","latitude","longitude","width","height","zoom","minZoom","cases_layer","interactiveLayerIds","all_county_info","cases","deaths","new_cases","new_deaths","hover_county","hover_latitude","hover_longitude","componentDidMount","updateCasesLayer","componentDidUpdate","prev_props","setState","setViewport","viewport","max_latitude","min_latitude","min_longitude","max_longitude","transitionInterpolator","transitionDuration","getViewport","makeSource","county","severity","source_properties","id","type","data","features","geometry","coordinates","makeLayer","layer_properties","paint","makeCountyBoundaries","get","then","response","build_cases_layer","counties","i","items","length","county_info","circle","lat","lon","push","catch","err","console","log","onClickCounty","event","preventDefault","feature","undefined","source","mapOnClick","onCountyEnter","lngLat","onCountyLeave","makePopup","render","mapbox_token","geolocateStyle","position","top","left","margin","navStyle","padding","enableHighAccuracy"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MapGL, {Source, Layer, Popup, GeolocateControl, NavigationControl, FlyToInterpolator } from 'react-map-gl';\nimport axios from 'axios';\nimport boundary_data from './ca_boundaries.json';\nimport StatisticsView from '../statisticsView/statisticsView.js';\nimport MediaQuery from 'react-media';\nimport { Link } from 'react-router-dom';\nimport './map.css';\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        selected_county: this.props.selected_county,\n        latitude: 36.7783, //° N, 119.4179° Wthis.props.latitude, //default for LA\n        longitude: -119.4179, //this.props.longitude, //default for LA\n        width: \"100%\",\n        height: \"50em\",\n        zoom: 5,\n        minZoom: 5,\n        cases_layer: null, \n        interactiveLayerIds: null, \n        all_county_info: null, \n        cases: null,\n        deaths: null,\n        new_cases: null,\n        new_deaths: null, \n        hover_county: null,\n        hover_latitude: null,\n        hover_longitude: null\n    };\n\n  }\n\n  componentDidMount() {\n    this.updateCasesLayer();\n\n  }\n\n  componentDidUpdate(prev_props) {\n\n      if(prev_props.selected_county !== this.props.selected_county) {\n        // this.setState({\n        //     latitude: this.props.latitude, \n        //     longitude: this.props.longitude,\n        //     zoom: 7,\n        //     transitionInterpolator: new FlyToInterpolator({speed: 1.2}),\n        //     transitionDuration: 'auto', \n        // });\n        //^^deprecated above camer operation\n        this.setState({\n          selected_county: this.props.selected_county\n        })\n      }\n\n  }\n  \n  setViewport(viewport) {\n    let max_latitude = 36;\n    let min_latitude = 35.5;\n    let min_longitude = -119.6;\n    let max_longitude = -118;\n\n    /**\n     * the 4 if statements below restrict panning\n     * react-mapbox-gl doesn't seem to have the maxBounds prop, \n     * so had to custom implement\n     */\n    if(viewport.latitude > max_latitude) {\n        viewport.latitude = max_latitude;\n    }\n    if(viewport.latitude < min_latitude) {\n        viewport.latitude = min_latitude;\n    }\n    if(viewport.longitude > max_longitude) {\n        viewport.longitude = max_longitude;\n    }\n    if(viewport.longitude < min_longitude) {\n        viewport.longitude = min_longitude;\n    }\n\n    this.setState({\n        latitude: viewport.latitude, \n        longitude: viewport.longitude, \n        zoom: viewport.zoom, \n        transitionInterpolator: null,\n        transitionDuration: null\n    })\n  }\n\n  getViewport() {\n    return {\n        latitude: this.state.latitude, \n        longitude: this.state.longitude, \n        width: this.state.width,\n        height: this.state.height,\n        zoom: this.state.zoom,\n        minZoom: this.state.minZoom, \n        transitionInterpolator: this.state.transitionInterpolator,\n        transitionDuration: this.state.transitionDuration\n    }\n  }\n\n  makeSource(county, latitude, longitude, severity) {\n    let source_properties = {\n        id: county, \n        type: 'geojson', \n        data: {\n            type: 'FeatureCollection', \n            features: [\n                {\n                    type: 'Feature', \n                    geometry: {\n                        type: 'Point', \n                        coordinates: [longitude, latitude]\n                    },\n                }\n            ]\n        }\n    }\n    return (\n        <Source key={county} {...source_properties}>\n            {this.makeLayer(county, severity)}\n        </Source>\n    )\n  }\n\n  makeLayer(county, severity) {\n\n    if(severity != 0 && severity < 100) {\n      severity = 100;\n    }\n\n    if(severity > 2000) {\n      severity = 2000;\n    }\n    let layer_properties = {\n        id: county, \n        type: \"circle\", \n        paint: {\n            'circle-radius': severity/30, \n            'circle-color': '#ffa700', \n            'circle-opacity': 0.3, \n            'circle-stroke-width': 1, \n            'circle-stroke-color': '#ffa700'\n   \n        }\n    }\n\n    return (\n            <Layer {...layer_properties}>\n            </Layer>\n    )\n  }\n  \n\n  makeCountyBoundaries() {\n      let source_properties = {\n        id: 'california',\n        type: 'geojson',\n        data: boundary_data\n      }\n\n      let layer_properties = {\n        'id': 'california',\n        'type': 'line',\n        'source': 'california',\n        'layout': {},\n        'paint': {\n            'line-color': '#414141'\n        }\n      }\n    \n      return (\n        <Source id='california' key='california' {...source_properties} >\n            <Layer {...layer_properties} />\n        </Source>\n      );\n      \n      \n      \n  }\n\n  updateCasesLayer() {\n\n      axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(\n          (response) => {\n            let build_cases_layer = [];\n            let counties = [];\n            for(let i = 0; i < response.data.items.length; ++i) {\n                let county_info = response.data.items[i];\n                let circle = this.makeSource(county_info.county, county_info.lat, county_info.lon, county_info.cases);\n                build_cases_layer.push(circle);\n                counties.push(county_info.county);\n            }\n\n            this.setState({\n                cases_layer: build_cases_layer,\n                interactiveLayerIds: counties\n            })\n          }\n          \n      ).catch(\n          (err) => {\n              console.log(err);\n          }\n      )\n  }\n\n  onClickCounty(event) {\n    event.preventDefault();\n    let feature = event.features[0];\n    if(feature === undefined || feature.source === undefined) {\n        return;\n    }\n    this.props.mapOnClick(feature.source, feature.geometry.coordinates[0], feature.geometry.coordinates[1]);\n    return;\n    this.setState({\n        selected_county: feature.source,\n        // latitude: feature.geometry.coordinates[1], \n        // longitude: feature.geometry.coordinates[0], \n        // transitionInterpolator: new FlyToInterpolator({speed: 1.2}),\n        // transitionDuration: 'auto', \n        // zoom: 7\n        //deprecated the above camera pan animation\n\n    }, \n    \n    () => {this.props.mapOnClick(feature.source, feature.geometry.coordinates[0], feature.geometry.coordinates[1])})\n\n    \n  }\n\n  onCountyEnter(event) {\n\n    return;\n    //below deprecated for now\n    console.log(event)\n    event.preventDefault();\n    \n    this.setState({\n      hover_county: \"testing\",\n      hover_latitude: event.lngLat[1], \n      hover_longitude: event.lngLat[0]\n    })\n    \n  }\n\n  onCountyLeave() {\n    return;\n    //below deperecated for now;\n    this.setState({\n      hover_county: null,\n      hover_latitude: null,\n      hover_longitude: null\n    })\n  }\n\n  makePopup(county, latitude, longitude) {\n    return (\n          <Popup \n          latitude={latitude} \n          longitude={longitude}\n          closeButton={false}\n      >\n          <div >\n              {county}\n          </div>\n      </Popup>\n    )\n  }\n\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport();\n\n\n    //vvv copied from github\n    const geolocateStyle = {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        margin: 10\n      };\n\n      const navStyle = {\n        position: 'absolute',\n        top: 36,\n        left: 0,\n        padding: '10px'\n      };\n    //^^^ copied from  github\n      //Todo: undelete statisticsView\n    return (\n\n        <div className=\"Map-container\">\n          \n            {/* <MediaQuery query=\"(max-width: 768px)\">\n              {\n                (matches) => {\n                    return matches ?\n                      <div>\n                        <StatisticsView \n                            county={this.state.selected_county}\n                        />\n                      </div>\n                      :\n                      null\n\n                }\n              }\n              </MediaQuery>\n          */}\n\n\n            <MapGL \n                {...viewport} \n                mapboxApiAccessToken={mapbox_token} \n                onViewportChange={(viewport) => { this.setViewport(viewport)}}\n                interactiveLayerIds={this.state.interactiveLayerIds}\n                onClick={(event) => {this.onClickCounty(event)}}\n                mapStyle='mapbox://styles/mapbox/dark-v10'\n                onMouseEnter={(event) => this.onCountyEnter(event)}\n                onMouseLeave={() => this.onCountyLeave()}\n               \n            >\n                {this.state.cases_layer}\n\n                {this.state.hover_county !== null ?\n                \n                  this.makePopup(this.state.hover_county, this.state.hover_latitude, this.state.hover_longitude)\n                  :\n                  null\n                }\n                {this.state.selected_county !== \"No county chosen\" && this.state.selected_county !== null ? \n                    (\n                        this.makePopup(this.props.selected_county, this.props.latitude, this.props.longitude)\n\n                    ) : null\n                }\n\n                <GeolocateControl\n                    style={geolocateStyle}\n                    positionOptions={{enableHighAccuracy: true}}\n                    trackUserLocation={true}\n                />\n\n                <div style={navStyle}>\n                    <NavigationControl />\n                </div>\n\n                {this.makeCountyBoundaries()}\n\n            </MapGL>\n        </div>\n    );\n  }\n    \n}\n\n  \n  \n  \n\n\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}