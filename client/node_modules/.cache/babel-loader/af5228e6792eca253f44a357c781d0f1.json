{"ast":null,"code":"var _jsxFileName = \"/Users/brianzeng/close/client/src/components/map/map.jsx\";\nimport React from 'react';\nimport MapGL, { Source, Layer, Popup, GeolocateControl, NavigationControl, FlyToInterpolator } from 'react-map-gl';\nimport axios from 'axios';\nimport boundary_data from './ca_boundaries.json';\nimport { Link } from 'react-router-dom';\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected_county: this.props.selected_county,\n      latitude: this.props.latitude,\n      //default for LA\n      longitude: this.props.longitude,\n      //default for LA\n      width: \"100%\",\n      height: \"100vh\",\n      zoom: 10,\n      minZoom: 5,\n      cases_layer: null,\n      interactiveLayerIds: null,\n      all_county_info: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateCasesLayer();\n  }\n\n  componentDidUpdate(prev_props) {\n    if (prev_props !== this.props) {\n      this.setState({\n        selected_county: this.props.selected_county,\n        latitude: this.props.latitude,\n        longitude: this.props.longitude,\n        zoom: 7,\n        transitionInterpolator: new FlyToInterpolator({\n          speed: 1.2\n        }),\n        transitionDuration: 'auto'\n      });\n    }\n  }\n\n  setViewport(viewport) {\n    let max_latitude = 42;\n    let min_latitude = 32.52;\n    let min_longitude = -124.6;\n    let max_longitude = -114.05;\n    /**\n     * the 4 if statements below restrict panning\n     * react-mapbox-gl doesn't seem to have the maxBounds prop, \n     * so had to custom implement\n     */\n\n    if (viewport.latitude > max_latitude) {\n      viewport.latitude = max_latitude;\n    }\n\n    if (viewport.latitude < min_latitude) {\n      viewport.latitude = min_latitude;\n    }\n\n    if (viewport.longitude > max_longitude) {\n      viewport.longitude = max_longitude;\n    }\n\n    if (viewport.longitude < min_longitude) {\n      viewport.longitude = min_longitude;\n    }\n\n    this.setState({\n      latitude: viewport.latitude,\n      longitude: viewport.longitude,\n      zoom: viewport.zoom,\n      transitionInterpolator: null,\n      transitionDuration: null\n    });\n  }\n\n  getViewport() {\n    return {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      width: this.state.width,\n      height: this.state.height,\n      zoom: this.state.zoom,\n      minZoom: this.state.minZoom,\n      transitionInterpolator: this.state.transitionInterpolator,\n      transitionDuration: this.state.transitionDuration\n    };\n  }\n\n  makeSource(county, latitude, longitude, severity) {\n    let source_properties = {\n      id: county,\n      type: 'geojson',\n      data: {\n        type: 'FeatureCollection',\n        features: [{\n          type: 'Feature',\n          geometry: {\n            type: 'Point',\n            coordinates: [longitude, latitude]\n          }\n        }]\n      }\n    };\n    return /*#__PURE__*/React.createElement(Source, Object.assign({\n      key: county\n    }, source_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }), this.makeLayer(county, severity));\n  }\n\n  makeLayer(county, severity) {\n    let layer_properties = {\n      id: county,\n      type: \"circle\",\n      paint: {\n        'circle-radius': severity,\n        'circle-color': '#ffa700',\n        'circle-opacity': 0.3,\n        'circle-stroke-width': 1,\n        'circle-stroke-color': '#ffa700'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Layer, Object.assign({}, layer_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  makeCountyBoundaries() {\n    let source_properties = {\n      id: 'california',\n      type: 'geojson',\n      data: boundary_data\n    };\n    let layer_properties = {\n      'id': 'california',\n      'type': 'line',\n      'source': 'california',\n      'layout': {},\n      'paint': {\n        'line-color': '#414141'\n      }\n    };\n    return /*#__PURE__*/React.createElement(Source, Object.assign({\n      id: \"california\",\n      key: \"california\"\n    }, source_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Layer, Object.assign({}, layer_properties, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    })));\n  }\n\n  updateCasesLayer() {\n    axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(response => {\n      let build_cases_layer = [];\n      let counties = [];\n\n      for (let i = 0; i < response.data.items.length; ++i) {\n        let county_info = response.data.items[i];\n        let circle = this.makeSource(county_info.county, county_info.lat, county_info.lon, county_info.severity);\n        build_cases_layer.push(circle);\n        counties.push(county_info.county);\n      }\n\n      this.setState({\n        cases_layer: build_cases_layer,\n        interactiveLayerIds: counties\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  onClickCounty(event) {\n    event.preventDefault();\n    let feature = event.features[0];\n\n    if (feature === undefined || feature.source === undefined) {\n      this.setState({\n        selected_county: null\n      });\n      return;\n    }\n\n    this.setState({\n      selected_county: feature.source,\n      latitude: feature.geometry.coordinates[1],\n      longitude: feature.geometry.coordinates[0],\n      transitionInterpolator: new FlyToInterpolator({\n        speed: 1.2\n      }),\n      transitionDuration: 'auto',\n      zoom: 7\n    });\n    this.props.mapOnClick(feature.source, feature.geometry.coordinates[0], feature.geometry.coordinates[1]);\n  }\n\n  makePopup(county, latitude, longitude) {\n    return /*#__PURE__*/React.createElement(Popup, {\n      latitude: latitude,\n      longitude: longitude,\n      closeOnClick: true,\n      onClose: () => this.setState({\n        selected_county: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    });\n  }\n\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport(); //vvv copied from github\n\n    const geolocateStyle = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      margin: 10\n    };\n    const navStyle = {\n      position: 'absolute',\n      top: 36,\n      left: 0,\n      padding: '10px'\n    }; //^^^ copied from github\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Map-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n      mapboxApiAccessToken: mapbox_token,\n      onViewportChange: viewport => {\n        this.setViewport(viewport);\n      },\n      interactiveLayerIds: this.state.interactiveLayerIds,\n      onClick: event => {\n        this.onClickCounty(event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }), this.state.cases_layer, this.state.selected_county ? /*#__PURE__*/React.createElement(Popup, {\n      latitude: this.props.latitude,\n      longitude: this.props.longitude,\n      closeButton: false,\n      onClose: () => this.setState({\n        selected_county: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"red\",\n        height: \"100px\",\n        paddindTop: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 29\n      }\n    }, this.state.selected_county)) : null, /*#__PURE__*/React.createElement(GeolocateControl, {\n      style: geolocateStyle,\n      positionOptions: {\n        enableHighAccuracy: true\n      },\n      trackUserLocation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: navStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(NavigationControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }\n    })), this.makeCountyBoundaries()));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/brianzeng/close/client/src/components/map/map.jsx"],"names":["React","MapGL","Source","Layer","Popup","GeolocateControl","NavigationControl","FlyToInterpolator","axios","boundary_data","Link","Map","Component","constructor","props","state","selected_county","latitude","longitude","width","height","zoom","minZoom","cases_layer","interactiveLayerIds","all_county_info","componentDidMount","updateCasesLayer","componentDidUpdate","prev_props","setState","transitionInterpolator","speed","transitionDuration","setViewport","viewport","max_latitude","min_latitude","min_longitude","max_longitude","getViewport","makeSource","county","severity","source_properties","id","type","data","features","geometry","coordinates","makeLayer","layer_properties","paint","makeCountyBoundaries","get","then","response","build_cases_layer","counties","i","items","length","county_info","circle","lat","lon","push","catch","err","console","log","onClickCounty","event","preventDefault","feature","undefined","source","mapOnClick","makePopup","render","mapbox_token","geolocateStyle","position","top","left","margin","navStyle","padding","backgroundColor","paddindTop","enableHighAccuracy"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MapGL, {Source, Layer, Popup, GeolocateControl, NavigationControl, FlyToInterpolator } from 'react-map-gl';\nimport axios from 'axios';\nimport boundary_data from './ca_boundaries.json';\nimport { Link } from 'react-router-dom';\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        selected_county: this.props.selected_county,\n        latitude: this.props.latitude, //default for LA\n        longitude: this.props.longitude, //default for LA\n        width: \"100%\",\n        height: \"100vh\",\n        zoom: 10,\n        minZoom: 5,\n        cases_layer: null, \n        interactiveLayerIds: null, \n        all_county_info: null\n    };\n\n  }\n\n  componentDidMount() {\n    this.updateCasesLayer();\n  }\n\n  componentDidUpdate(prev_props) {\n      if(prev_props !== this.props) {\n        this.setState({\n            selected_county: this.props.selected_county, \n            latitude: this.props.latitude, \n            longitude: this.props.longitude,\n            zoom: 7,\n            transitionInterpolator: new FlyToInterpolator({speed: 1.2}),\n            transitionDuration: 'auto', \n        })\n      }\n  }\n  \n  setViewport(viewport) {\n    let max_latitude = 42;\n    let min_latitude = 32.52;\n    let min_longitude = -124.6;\n    let max_longitude = -114.05;\n\n    /**\n     * the 4 if statements below restrict panning\n     * react-mapbox-gl doesn't seem to have the maxBounds prop, \n     * so had to custom implement\n     */\n    if(viewport.latitude > max_latitude) {\n        viewport.latitude = max_latitude;\n    }\n    if(viewport.latitude < min_latitude) {\n        viewport.latitude = min_latitude;\n    }\n    if(viewport.longitude > max_longitude) {\n        viewport.longitude = max_longitude;\n    }\n    if(viewport.longitude < min_longitude) {\n        viewport.longitude = min_longitude;\n    }\n\n    this.setState({\n        latitude: viewport.latitude, \n        longitude: viewport.longitude, \n        zoom: viewport.zoom, \n        transitionInterpolator: null,\n        transitionDuration: null\n    })\n  }\n\n  getViewport() {\n    return {\n        latitude: this.state.latitude, \n        longitude: this.state.longitude, \n        width: this.state.width,\n        height: this.state.height,\n        zoom: this.state.zoom,\n        minZoom: this.state.minZoom, \n        transitionInterpolator: this.state.transitionInterpolator,\n        transitionDuration: this.state.transitionDuration\n    }\n  }\n\n  makeSource(county, latitude, longitude, severity) {\n    let source_properties = {\n        id: county, \n        type: 'geojson', \n        data: {\n            type: 'FeatureCollection', \n            features: [\n                {\n                    type: 'Feature', \n                    geometry: {\n                        type: 'Point', \n                        coordinates: [longitude, latitude]\n                    },\n                }\n            ]\n        }\n    }\n    return (\n        <Source key={county} {...source_properties}>\n            {this.makeLayer(county, severity)}\n        </Source>\n    )\n  }\n\n  makeLayer(county, severity) {\n\n    let layer_properties = {\n        id: county, \n        type: \"circle\", \n        paint: {\n            'circle-radius': severity, \n            'circle-color': '#ffa700', \n            'circle-opacity': 0.3, \n            'circle-stroke-width': 1, \n            'circle-stroke-color': '#ffa700'\n   \n        }\n    }\n\n    return (\n            <Layer {...layer_properties}>\n            </Layer>\n    )\n  }\n  \n\n  makeCountyBoundaries() {\n      let source_properties = {\n        id: 'california',\n        type: 'geojson',\n        data: boundary_data\n      }\n\n      let layer_properties = {\n        'id': 'california',\n        'type': 'line',\n        'source': 'california',\n        'layout': {},\n        'paint': {\n            'line-color': '#414141'\n        }\n      }\n    \n      return (\n        <Source id='california' key='california' {...source_properties} >\n            <Layer {...layer_properties} />\n        </Source>\n      );\n      \n      \n      \n  }\n  updateCasesLayer() {\n      axios.get(\"https://us-central1-iris-263608.cloudfunctions.net/close_ca_map_all\").then(\n          (response) => {\n            let build_cases_layer = [];\n            let counties = [];\n            for(let i = 0; i < response.data.items.length; ++i) {\n                let county_info = response.data.items[i];\n                let circle = this.makeSource(county_info.county, county_info.lat, county_info.lon, county_info.severity);\n                build_cases_layer.push(circle);\n                counties.push(county_info.county);\n            }\n\n            this.setState({\n                cases_layer: build_cases_layer,\n                interactiveLayerIds: counties\n            })\n          }\n      ).catch(\n          (err) => {\n              console.log(err);\n          }\n      )\n  }\n\n  onClickCounty(event) {\n    event.preventDefault();\n    let feature = event.features[0];\n    if(feature === undefined || feature.source === undefined) {\n        this.setState({\n            selected_county: null\n        })\n        return;\n    }\n    \n    this.setState({\n        selected_county: feature.source, \n        latitude: feature.geometry.coordinates[1], \n        longitude: feature.geometry.coordinates[0], \n        transitionInterpolator: new FlyToInterpolator({speed: 1.2}),\n        transitionDuration: 'auto', \n        zoom: 7\n\n    })\n    this.props.mapOnClick(feature.source, feature.geometry.coordinates[0], feature.geometry.coordinates[1]);\n  }\n\n \n  makePopup(county, latitude, longitude) {\n    return (\n        <Popup \n            latitude={latitude} \n            longitude={longitude}\n            closeOnClick={true}\n            onClose={() => this.setState({selected_county: null})}\n        >\n            {/**\n            * Your code here Sam\n            */\n            }\n        </Popup>\n    )\n  }\n  render() {\n    let mapbox_token = \"pk.eyJ1Ijoic2hhbGludnMiLCJhIjoiY2s4ZnNtZHhlMDd0NzNrcGU4eHJnYXgyOCJ9.qv2ft9xqJ32Ovea3vDq3Yg\";\n    let viewport = this.getViewport();\n\n\n    //vvv copied from github\n    const geolocateStyle = {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        margin: 10\n      };\n\n      const navStyle = {\n        position: 'absolute',\n        top: 36,\n        left: 0,\n        padding: '10px'\n      };\n    //^^^ copied from github\n\n    return (\n\n        <div className=\"Map-container\">\n            <MapGL \n                {...viewport} \n                mapboxApiAccessToken={mapbox_token} \n                onViewportChange={(viewport) => { this.setViewport(viewport)}}\n                interactiveLayerIds={this.state.interactiveLayerIds}\n                onClick={(event) => {this.onClickCounty(event)}}\n            >\n                {this.state.cases_layer}\n\n                {this.state.selected_county ? \n                    (\n                        <Popup \n                            latitude={this.props.latitude} \n                            longitude={this.props.longitude}\n                            closeButton={false}\n                            onClose={() => this.setState({selected_county: null})}\n                        >\n                            <div style={{backgroundColor: \"red\", height: \"100px\", paddindTop: \"0px\"}}>\n                         \n                                {this.state.selected_county}\n                            </div>\n                        </Popup>\n\n                    ) : null\n                }\n\n                <GeolocateControl\n                    style={geolocateStyle}\n                    positionOptions={{enableHighAccuracy: true}}\n                    trackUserLocation={true}\n                />\n\n                <div style={navStyle}>\n                    <NavigationControl />\n                </div>\n\n                {this.makeCountyBoundaries()}\n\n            </MapGL>\n        </div>\n    );\n  }\n    \n}\n\n  \n  \n  \n\n\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}